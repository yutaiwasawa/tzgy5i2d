{"version":3,"sources":["webpack:///./node_modules/reset-css/reset.css","webpack:///reset.css","webpack:///./src/stylesheets/_base.scss","webpack:///./node_modules/sass-mq/_mq.scss","webpack:///./src/stylesheets/_variables.scss","webpack:///./src/stylesheets/_style.scss"],"names":[],"mappings":"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","file":"./stylesheets/main.css","sourcesContent":["/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n\tdisplay: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n\tline-height: 1;\n}\nmenu, ol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n","/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline; }\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block; }\n\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n  display: none; }\n\nbody {\n  line-height: 1; }\n\nmenu, ol, ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n","html {\n  font-size: 62.5%;\n  overflow-x: hidden;\n\n  @include mq(md) {\n    font-size: 100%;\n  }\n}\n\nbody {\n  // background: #f7f7f7;\n  color: $fontColor;\n  font-family: $fontFamily;\n} // body\n\n.container {\n  margin: 0 auto;\n  // width: 100%;\n  max-width: $containerSizeSp;\n\n  // @include mq(md) {\n  //   max-width: $containerSizePc;\n  // }\n} // .container\n\n.row {\n  margin: 0 $outerSizeSp;\n\n  @include mq(md) {\n    margin: 0 $rowSizePc;\n    // margin: 0;\n  }\n} // .row\n\n.reset-row-sp {\n  margin: 0;\n\n  @include mq(md) {\n    margin: 0 $rowSizePc;\n    // margin: 0;\n  }\n} // .reset-row-sp\n\nimg {\n  max-width: 100%;\n  vertical-align: bottom;\n} // img\n\na {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  cursor: pointer;\n  color: $fontColor;\n  display: inline-block;\n  text-decoration: none;\n  transition: all linear 0.1s;\n\n  &:hover {\n    @include mq(md) {\n      opacity: 0.95;\n      cursor: pointer;\n    }\n  }\n} // a\n\n*:focus {\n  outline: none;\n}\n\n.bg-color {\n  background: $bgColor;\n} // .bg-color\n\n.white-base {\n  background: #fff;\n} // .white-base\n\n.wrap-btn {\n  // margin: 3.5rem 0 0;\n  text-align: center;\n\n  @include mq(md) {\n    // margin: 60px 0 0;\n  }\n} // .wrap-btn\n\n.btn {\n  display: inline-block;\n  padding: 2.6rem 0;\n  position: relative;\n  width: (240 / $contentSizeSp) * 100%;\n  z-index: 1;\n\n  @include mq(md) {\n    padding: 34px 0;\n    width: 360px;\n  }\n\n  &.btn-cta {\n    background: $ctaColor;\n    color: #fff;\n    // font-size: clamp(16px, 1vw, 30px);\n    // font-size: clamp(1.8rem, 100vw, 20px);\n    font-size: 1.8rem;\n    font-weight: $boldSize;\n    position: relative;\n\n    @include mq(md) {\n      font-size: 22px;\n    }\n\n    .arrow {\n      position: absolute;\n      top: 50%;\n      right: (15 / 253) * 100%;\n      transform: translateY(-50%);\n      width: 12px;\n\n      @include mq(md) {\n        width: 14px;\n      }\n    } // .arrow\n  } // .btn-cta\n}\n\n.reset {\n  margin: 0 !important;\n} // .reset\n\n.section-content {\n  // padding: {\n  //   top: clamp(4.8rem, 50%, 9.6rem);\n  //   bottom: clamp(4.8rem, 50%, 9.6rem);\n  // }\n  padding: 5.6rem 0;\n\n  @include mq(md) {\n    padding: 126px 0;\n    // padding: 99px 0;\n    // padding: 0;\n  }\n} // .section-content\n\n.frame {\n  border: 1px solid #000;\n}\n\n.bg-gray {\n  background: #f8f5f1;\n} // .bg-gray\n.bg-white {\n  background: #fff;\n} // .bg-gray\n\n.frame-top {\n  border: {\n    top: 1px solid #000;\n    right: 1px solid #000;\n    left: 1px solid #000;\n  }\n} // .frame-top\n\n.frame-middle {\n  border: {\n    right: 1px solid #000;\n    left: 1px solid #000;\n  }\n} // .frame-middle\n\n.frame-bottom {\n  border: {\n    right: 1px solid #000;\n    bottom: 1px solid #000;\n    left: 1px solid #000;\n  }\n} // .frame-bottom\n\n.more-btn {\n  padding: {\n    top: 3.5rem;\n    bottom: 4rem;\n  }\n  padding: {\n    top: clamp(10px, 50%, 35px);\n    bottom: clamp(10px, 50%, 40px);\n  }\n  text-align: center;\n\n  @include mq(md) {\n    padding: {\n      top: 77px;\n      bottom: 115px;\n    }\n  }\n\n  img {\n    max-width: (160 / $contentSizeSp) * 100%;\n\n    @include mq(md) {\n      width: 250px;\n    }\n  } // img\n} // .more-btn\n\n.sp-view {\n  display: block;\n\n  @include mq(md) {\n    display: none;\n  }\n} // .sp-view\n\n.pc-view {\n  display: none;\n\n  @include mq(md) {\n    display: block;\n  }\n} // .pc-view\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","$accentColor: #d52564;\n\n$twitterColor: #33a4ef;\n$instagramColor: #f56136;\n$btnDetailColor: #473122;\n$bgGray: #f8f5f1;\n\n$boldSize: 600;\n\n// $fontFamily: \"Helvetica Neue\", Arial, \"Hiragino Kaku Gothic ProN\",\n//   \"Hiragino Sans\", \"BIZ UDPGothic\", Meiryo, sans-serif;\n\n// $fontFamily: YakuHanMP, \"游明朝\", YuMincho, \"Hiragino Mincho ProN W3\",\n//   \"ヒラギノ明朝 ProN W3\", \"Hiragino Mincho ProN\", \"HG明朝E\", \"ＭＳ Ｐ明朝\",\n//   \"ＭＳ 明朝\", serif;\n\n// 明朝\n// $fontFamily: YakuHanMP, \"Times New Roman\", \"YuMincho\", \"Hiragino Mincho ProN\", \"Yu Mincho\", \"MS PMincho\", serif;\n\n// ゴシック\n$fontFamily: YakuHanMP, \"Helvetica Neue\", \"Helvetica\", \"Hiragino Sans\",\n  \"Hiragino Kaku Gothic ProN\", \"Arial\", \"Yu Gothic\", \"Meiryo\", sans-serif;\n\n// ゴシックwebfontあり\n// $fontFamily: \"Montserrat\", YakuHanMP, \"Helvetica Neue\", \"Helvetica\",\n//   \"Hiragino Sans\", \"Hiragino Kaku Gothic ProN\", \"Arial\", \"Yu Gothic\", \"Meiryo\",\n//   sans-serif;\n\n$windowSizeSp: 1080;\n$contentSizeSp: 1000;\n$outerSizeSp: ($windowSizeSp - $contentSizeSp) / $windowSizeSp / 2 * 100 * 1%;\n$rowSizePc: 50px;\n$baseSizePc: 1040px;\n$containerSizePc: $baseSizePc + ($rowSizePc * 2);\n$containerSizeSp: 1080px;\n\n$bgColor: #fafafb;\n$ctaColor: #07652a;\n$fontColor: #4c4948;\n$mainColor: #f99faf;\n","body {\n  width: 100%;\n} // body\n\n.kv {\n  // background: url(../images/kv-bg2.png) no-repeat;\n  // background-size: contain;\n  // background-position: top;\n  // padding-top: (1549/1080) * 100%;\n  position: relative;\n\n  .download-btn {\n    position: absolute;\n    top: 49.5%;\n    right: 7.8%;\n    width: (502 / $windowSizeSp) * 100%;\n  } // .download-btn\n\n  .cm-btn {\n    position: absolute;\n    bottom: 1%;\n    right: 2%;\n    width: (378 / $windowSizeSp) * 100%;\n  } // .cm-btn\n\n  .logo {\n    text-align: center;\n    img {\n      width: (338 / $windowSizeSp) * 100%;\n    } // img\n  } // .logo\n\n  // .scroll-btn {\n  //   display: block;\n  //   position: absolute;\n  //   bottom: 1.54%;\n  //   right: 0;\n  //   left: 0;\n  //   margin: auto;\n  //   width: (583 / $windowSizeSp) * 100%;\n  // } // .scroll-btn\n} // .kv\n\n#cm {\n  .movie {\n    background: #151515;\n    text-align: center;\n    padding: 6% 0 4.5%;\n\n    .heading {\n      margin: 0 0 6%;\n      width: (572 / $windowSizeSp) * 100%;\n    } // .heading\n\n    // .youtube {\n    //   width: 100%;\n    //   aspect-ratio: 16/9;\n\n    //   iframe {\n    //     height: 100%;\n    //     width: (960 / $windowSizeSp) * 100%;\n    //   } // iframe\n    // } // .youtube\n    .youtube {\n      position: relative;\n      width: 100%;\n      padding-top: 56.25%;\n\n      iframe {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        margin: auto;\n        width: (960 / $windowSizeSp) * 100%;\n        height: 100%;\n      } // iframe\n    } // .youtube\n  } // .movie\n\n  .cta-btns {\n    background: #c1c1c1;\n    padding: 3% 0;\n\n    .cta-btns-list {\n      display: flex;\n      justify-content: space-between;\n\n      &__item {\n        width: 50%;\n        img {\n          width: (470/480) * 100%;\n        } // img\n      } // .cta-btns-list__item\n    } // .cta-btn-list\n  } // .cta-btn\n} // .cm\n\n#contact {\n  padding: 9% 0;\n  .heading {\n    margin: 0 auto;\n    width: (822 / $windowSizeSp) * 100%;\n    display: block;\n  } // .heading\n} // #contact\n\n.footer-section {\n  background: #262626;\n  color: #838383;\n  padding: 12% 0 4%;\n\n  .footer-nav-list {\n    background: #262626;\n    font-size: 1.4rem;\n    letter-spacing: 0.3rem;\n    &__item {\n      padding: 2% 0;\n      width: 100%;\n\n      .text {\n        font-size: 1.6rem;\n      } // .text\n\n      .link {\n        align-items: center;\n        border-bottom: 1px solid #838383;\n        cursor: pointer;\n        display: flex;\n        justify-content: space-between;\n        width: 100%;\n\n        .arrow {\n          width: (40/ 960) * 100%;\n        } // .arrow\n      } // .link\n    } // .footer-nav-list__item\n  } // .footer-nav-list\n\n  .footer-logo {\n    margin: 0 0 7%;\n    width: (408 / $windowSizeSp) * 100%;\n  } // .footer-logo\n\n  .address {\n    font-size: 1.3rem;\n    line-height: 1.9;\n    margin: 7% 0 4%;\n  } // .address\n\n  small {\n    font-size: 1rem;\n  } // small\n} // .footer-section\n\n#bottom-fix-btn {\n  background: #fff;\n  display: flex;\n  justify-content: space-between;\n  opacity: 0;\n  padding: 4% 5%;\n  position: sticky;\n  bottom: 0;\n  transition: opacity 0.2s linear;\n\n  &.active {\n    opacity: 1;\n  } // .active\n\n  .thumb {\n    width: 25%;\n  } // .thumb\n\n  .title-btn {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 70%;\n    .title {\n      font-size: 1.6rem;\n      font-weight: 600;\n    } // .title\n\n    .cta-btn {\n      border-radius: 0.3rem;\n      display: block;\n      font-size: 1.4rem;\n      background: #2f2f2f;\n      color: #fff;\n      padding: 6% 4%;\n      text-align: center;\n    } // .cta-btn\n  } // .title-btn\n} // #bottom-fix-btn\n"],"sourceRoot":""}